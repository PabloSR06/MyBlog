@using Models
@inject HttpClient? HttpClient
@using Markdig


<PageTitle>@postInfo?.Title</PageTitle>

<div class="post">
    <div class="post-info">
        <h2 class="post-title">@postInfo?.Title</h2>
        <p class="post-date">@postInfo?.Date</p>
    </div>
    <div>
        <div class="post-content">
            @((MarkupString)text)
            </div>
    </div>
    <div style="margin:50px;"></div>
</div>

@code {

    [Parameter]
    public string? Path { get; set; }

    private string text = "";

    private Post? postInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var empty =  await HttpClient.GetStringAsync($"/files/posts/{Path}.md") ?? "Error";
        text = Markdown.ToHtml(empty);

        var posts = await HttpClient.GetFromJsonAsync<List<Post>>("PostInfo.json");
        postInfo = posts?.Where(x => x.fileName == Path).FirstOrDefault() ?? new();
    }
}