@using Models;
@inject HttpClient HttpClient;
@using Markdig;
@using MarkdigExtensions.SyntaxHighlighting;
@inject NavigationManager NavigationManager;
@using ColorCode.Styling;


<link rel="stylesheet" href="css/markdown.css">

<style>
    img {
        height: auto;
        width: auto;
        max-width: 100%;
    }
</style>

<PageTitle>@PostData?.Title</PageTitle>
    <HeadContent>
        <meta property="og:title" content="@PostData?.Title - Pablo Suarez Romero">
        <meta property="og:description" content="@PostData?.description">
        <meta name="twitter:title" content="@PostData?.Title - Pablo Suarez Romero" />
        <meta name="twitter:description" content="@PostData?.description" />
    </HeadContent>
    <div class="post">
        <div class="post-info">
            <h2 class="post-title">@PostData?.Title</h2>
        <p class="post-date">@PostData?.Date</p>
    </div>
    <div>
        <div class="post-content">
            @((MarkupString)Text)
        </div>
    </div>
    <div style="margin:50px;"></div>
</div>

@code {

    [Parameter]
    public string? Path { get; set; }

    private string Text = "";

    private Post? PostData { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var pipeline = new MarkdownPipelineBuilder().UseSyntaxHighlighting().UseYamlFrontMatter().Build();


        try
        {
            string empty = String.Empty;
            List<Post> posts = await HttpClient.GetFromJsonAsync<List<Post>>("PostInfo.json") ?? new List<Post>();

            Post found = posts.Find(x => x.fileName.Contains(Path));

            //TODO: Sometimes if you manually type the url it doesn't work, this is a workaround
            //Contains can not evaluate
            if (found == null)
            {
                foreach (var x in posts)
                {
                    if (x.fileName.ToLower() == Path.ToLower())
                    {
                        found = x;
                    }
                }
            }

            if (found != null)
            {
                if (found.isExternal)
                {
                    NavigationManager.NavigateTo(found.url.ToString());
                }
                empty = await HttpClient.GetStringAsync($"/posts/{Path}.md");
                Text = Markdown.ToHtml(empty, pipeline);
                PostData = found ?? new();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }catch(Exception e)
        {
            Text = "<p class=\"textError\">Esto falla más que una escopeta de feria</p>";
        }
    }
}